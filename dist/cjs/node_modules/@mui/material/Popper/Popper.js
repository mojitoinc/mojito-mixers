'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _extends = require('../../../@babel/runtime/helpers/esm/extends.js');
var React = require('react');
var index = require('../../../prop-types/index.js');
var system = require('@mui/system');
var require$$2 = require('react/jsx-runtime');
var PopperUnstyled = require('../../base/PopperUnstyled/PopperUnstyled.js');
var HTMLElementType = require('../../utils/esm/HTMLElementType.js');
var refType = require('../../utils/esm/refType.js');

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespace(React);

/**
 *
 * Demos:
 *
 * - [Autocomplete](https://mui.com/components/autocomplete/)
 * - [Menus](https://mui.com/components/menus/)
 * - [Popper](https://mui.com/components/popper/)
 *
 * API:
 *
 * - [Popper API](https://mui.com/api/popper/)
 */
const Popper = /*#__PURE__*/React__namespace.forwardRef(function Popper(props, ref) {
  const theme = system.useThemeWithoutDefault();
  return /*#__PURE__*/require$$2.jsx(PopperUnstyled["default"], _extends["default"]({
    direction: theme == null ? void 0 : theme.direction
  }, props, {
    ref: ref
  }));
});
process.env.NODE_ENV !== "production" ? Popper.propTypes
/* remove-proptypes */
= {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------

  /**
   * An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),
   * or a function that returns either.
   * It's used to set the position of the popper.
   * The return value will passed as the reference object of the Popper instance.
   */
  anchorEl: index["default"]
  /* @typescript-to-proptypes-ignore */
  .oneOfType([HTMLElementType["default"], index["default"].object, index["default"].func]),

  /**
   * Popper render function or node.
   */
  children: index["default"]
  /* @typescript-to-proptypes-ignore */
  .oneOfType([index["default"].node, index["default"].func]),

  /**
   * An HTML element or function that returns one.
   * The `container` will have the portal children appended to it.
   *
   * By default, it uses the body of the top-level document object,
   * so it's simply `document.body` most of the time.
   */
  container: index["default"]
  /* @typescript-to-proptypes-ignore */
  .oneOfType([HTMLElementType["default"], index["default"].func]),

  /**
   * The `children` will be under the DOM hierarchy of the parent component.
   * @default false
   */
  disablePortal: index["default"].bool,

  /**
   * Always keep the children in the DOM.
   * This prop can be useful in SEO situation or
   * when you want to maximize the responsiveness of the Popper.
   * @default false
   */
  keepMounted: index["default"].bool,

  /**
   * Popper.js is based on a "plugin-like" architecture,
   * most of its features are fully encapsulated "modifiers".
   *
   * A modifier is a function that is called each time Popper.js needs to
   * compute the position of the popper.
   * For this reason, modifiers should be very performant to avoid bottlenecks.
   * To learn how to create a modifier, [read the modifiers documentation](https://popper.js.org/docs/v2/modifiers/).
   */
  modifiers: index["default"].arrayOf(index["default"].shape({
    data: index["default"].object,
    effect: index["default"].func,
    enabled: index["default"].bool,
    fn: index["default"].func,
    name: index["default"].any.isRequired,
    options: index["default"].object,
    phase: index["default"].oneOf(['afterMain', 'afterRead', 'afterWrite', 'beforeMain', 'beforeRead', 'beforeWrite', 'main', 'read', 'write']),
    requires: index["default"].arrayOf(index["default"].string),
    requiresIfExists: index["default"].arrayOf(index["default"].string)
  })),

  /**
   * If `true`, the component is shown.
   */
  open: index["default"].bool.isRequired,

  /**
   * Popper placement.
   * @default 'bottom'
   */
  placement: index["default"].oneOf(['auto-end', 'auto-start', 'auto', 'bottom-end', 'bottom-start', 'bottom', 'left-end', 'left-start', 'left', 'right-end', 'right-start', 'right', 'top-end', 'top-start', 'top']),

  /**
   * Options provided to the [`Popper.js`](https://popper.js.org/docs/v2/constructors/#options) instance.
   * @default {}
   */
  popperOptions: index["default"].shape({
    modifiers: index["default"].array,
    onFirstUpdate: index["default"].func,
    placement: index["default"].oneOf(['auto-end', 'auto-start', 'auto', 'bottom-end', 'bottom-start', 'bottom', 'left-end', 'left-start', 'left', 'right-end', 'right-start', 'right', 'top-end', 'top-start', 'top']),
    strategy: index["default"].oneOf(['absolute', 'fixed'])
  }),

  /**
   * A ref that points to the used popper instance.
   */
  popperRef: refType["default"],

  /**
   * Help supporting a react-transition-group/Transition component.
   * @default false
   */
  transition: index["default"].bool
} : void 0;
var Popper$1 = Popper;

exports["default"] = Popper$1;
//# sourceMappingURL=Popper.js.map
